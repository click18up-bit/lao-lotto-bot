const express = require("express");
const mongoose = require("mongoose");
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");

/* ===== ENV ===== */
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const TARGET_GROUP_ID = process.env.TARGET_GROUP_ID;
const SUPER_ADMIN_ID = (process.env.SUPER_ADMIN_ID || "").toString();
const EDITOR_IDS = (process.env.EDITOR_IDS || "").split(",").map(x => x.trim()).filter(Boolean);

/* ===== Setup ===== */
const app = express();
app.use(express.json());
const bot = new TelegramBot(BOT_TOKEN);

/* ===== DB Schemas ===== */
const BetSchema = new mongoose.Schema({
  userId: String,
  username: String,
  name: String,
  number: String,
  round: String,
  createdAt: { type: Date, default: Date.now }
});
const Bet = mongoose.model("Bet", BetSchema);

const ResultSchema = new mongoose.Schema({
  round: String,
  top4: String,
  top3: String,
  top2: String,
  createdAt: { type: Date, default: Date.now }
});
const Result = mongoose.model("Result", ResultSchema);

/* ===== Connect DB ===== */
mongoose.connect(MONGO_URI)
  .then(() => console.log("‚úÖ MongoDB Connected"))
  .catch(err => console.error("‚ùå MongoDB Error:", err));

/* ===== Helpers ===== */
function isAdmin(userId) {
  const id = (userId || "").toString();
  return id === SUPER_ADMIN_ID || EDITOR_IDS.includes(id);
}

function getRoundDate() {
  const now = new Date();
  const tz = "Asia/Bangkok";
  const y = new Intl.DateTimeFormat('en-CA', { timeZone: tz, year: 'numeric' }).format(now);
  const m = new Intl.DateTimeFormat('en-CA', { timeZone: tz, month: '2-digit' }).format(now);
  const d = new Intl.DateTimeFormat('en-CA', { timeZone: tz, day: '2-digit' }).format(now);
  return `${y}-${m}-${d}`;
}

function prettyList(users) {
  if (!users || users.length === 0) return "‚ùå ‡∫ö‡ªç‡ªà‡∫°‡∫µ";
  return users.map(w => w.username ? `@${w.username}` : (w.name ? w.name : `id${w.userId}`)).join(", ");
}

/* ===== /start ===== */
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const keyboardUser = [
    [{ text: "üé≤ ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ó‡∫≤‡∫ç‡ªÄ‡∫•‡∫Å" }],
    [{ text: "üîç ‡∫Å‡∫ß‡∫î‡∫ú‡∫ª‡∫ô‡∫´‡∫ß‡∫ç" }]
  ];
  const keyboardAdmin = [
    [{ text: "üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•" }],
    [{ text: "üìä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö" }]
  ];
  const replyMarkup = {
    reply_markup: { keyboard: isAdmin(userId) ? keyboardUser.concat(keyboardAdmin) : keyboardUser, resize_keyboard: true }
  };
  bot.sendMessage(chatId, isAdmin(userId) ? "üëë ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô!" : "üëã ‡∫™‡∫∞‡∫ö‡∫≤‡∫ç‡∫î‡∫µ!", replyMarkup);
});

/* ===== Message Handler ===== */
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = (msg.text || "").trim();
  const userId = msg.from.id.toString();
  const username = msg.from.username || "";
  const name = msg.from.first_name || "";

  if (!text) return;

  if (text === "üé≤ ‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ó‡∫≤‡∫ç‡ªÄ‡∫•‡∫Å") {
    bot.sendMessage(chatId, `üé≤ ‡∫Æ‡∫≠‡∫ö‡ªÉ‡ªù‡ªà‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ï‡∫ª‡ªâ‡∫ô!

üìú ‡∫Å‡∫ª‡∫î‡∫Å‡∫≤:
1Ô∏è‚É£ ‡∫ó‡∫≤‡∫ç‡ªÑ‡∫î‡ªâ‡∫Ñ‡∫±‡ªâ‡∫á‡∫î‡∫Ω‡∫ß‡∫ï‡ªç‡ªà‡∫Æ‡∫≠‡∫ö
2Ô∏è‚É£ ‡∫û‡∫¥‡∫°‡ªÄ‡∫•‡∫Å 2, 3 ‡∫´‡∫º‡∫∑ 4 ‡∫ï‡∫ª‡∫ß

üèÜ ‡∫•‡∫≤‡∫á‡∫ß‡∫±‡∫ô:
üëë 4 ‡∫ï‡∫ª‡∫ß‡∫ï‡∫ª‡∫á ‚ûù 20,000 ‡ªÄ‡∫Ñ‡∫£‡∫î‡∫¥‡∫î
ü•á 3 ‡∫ï‡∫ª‡∫ß‡∫ö‡∫ô ‚ûù 5,000 ‡ªÄ‡∫Ñ‡∫£‡∫î‡∫¥‡∫î
‚¨ÜÔ∏è 2 ‡∫ï‡∫ª‡∫ß‡∫ö‡∫ô ‚ûù 500 ‡ªÄ‡∫Ñ‡∫£‡∫î‡∫¥‡∫î

üìÖ ‡∫õ‡∫∞‡∫Å‡∫≤‡∫î‡∫ú‡∫ª‡∫ô: 21:00 ‡ªÇ‡∫°‡∫á
üï£ ‡∫õ‡∫¥‡∫î‡∫Æ‡∫±‡∫ö: 20:25 ‡ªÇ‡∫°‡∫á
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ ‡∫û‡∫¥‡∫°‡ªÄ‡∫•‡∫Å 2, 3 ‡∫´‡∫º‡∫∑ 4 ‡∫ï‡∫ª‡∫ß ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Æ‡ªà‡∫ß‡∫°‡∫™‡∫ª‡∫ô‡∫∏‡∫Å`);
    return;
  }

  if (text === "üîç ‡∫Å‡∫ß‡∫î‡∫ú‡∫ª‡∫ô‡∫´‡∫ß‡∫ç") {
    const last = await Result.findOne().sort({ createdAt: -1 });
    if (!last) {
      bot.sendMessage(chatId, "‚ùå ‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ú‡∫ª‡∫ô‡∫´‡∫ß‡∫ç");
    } else {
      const round = last.round;
      const winners4 = await Bet.find({ number: last.top4, round });
      const winners3 = await Bet.find({ number: last.top3, round });
      const winners2 = await Bet.find({ number: last.top2, round });
      let msgResult = `üéâ ‡∫õ‡∫∞‡∫Å‡∫≤‡∫î‡∫ú‡∫ª‡∫ô‡∫´‡∫ß‡∫ç ${round}\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
      msgResult += `üëë 4 ‡∫ï‡∫ª‡∫ß: ${last.top4} ‚ûù 20,000 ‡ªÄ‡∫Ñ‡∫£‡∫î‡∫¥‡∫î\nüéØ ${prettyList(winners4)}\n\n`;
      msgResult += `ü•á 3 ‡∫ï‡∫ª‡∫ß: ${last.top3} ‚ûù 5,000 ‡ªÄ‡∫Ñ‡∫£‡∫î‡∫¥‡∫î\nüéØ ${prettyList(winners3)}\n\n`;
      msgResult += `‚¨ÜÔ∏è 2 ‡∫ï‡∫ª‡∫ß: ${last.top2} ‚ûù 500 ‡ªÄ‡∫Ñ‡∫£‡∫î‡∫¥‡∫î\nüéØ ${prettyList(winners2)}\n\n`;
      msgResult += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüèÜ ‡∫Ç‡ªç‡ªÉ‡∫´‡ªâ‡ªÇ‡∫ä‡∫Å‡∫î‡∫µ‡ªÉ‡∫ô‡∫Æ‡∫≠‡∫ö‡ªú‡ªâ‡∫≤!";
      bot.sendMessage(chatId, msgResult);
    }
    return;
  }

  if (text === "üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•" && isAdmin(userId)) {
    bot.sendMessage(chatId, "‚úçÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 1234)");
    bot.once("message", async (res) => {
      const rtext = (res.text || "").trim();
      if (!/^\d{4}$/.test(rtext)) {
        bot.sendMessage(chatId, "‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å");
        return;
      }
      const round = getRoundDate();
      const exist = await Result.findOne({ round });
      if (exist) {
        bot.sendMessage(chatId, "‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß");
        return;
      }
      const top4 = rtext;
      const top3 = rtext.slice(-3);
      const top2 = rtext.slice(-2);
      await Result.create({ round, top4, top3, top2 });
      bot.sendMessage(chatId, `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• ${top4} (3 ‡∏ï‡∏±‡∏ß: ${top3}, 2 ‡∏ï‡∏±‡∏ß: ${top2})`);
    });
    return;
  }

  if (/^\d{2,4}$/.test(text)) {
    const round = getRoundDate();
    const already = await Bet.findOne({ userId, round });
    if (already) {
      bot.sendMessage(chatId, "‚ö†Ô∏è ‡∫ó‡ªà‡∫≤‡∫ô‡∫ó‡∫≤‡∫ç‡ªÅ‡∫•‡ªâ‡∫ß ‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫Æ‡∫≠‡∫ö‡ªÉ‡ªù‡ªà");
      return;
    }
    bot.sendMessage(chatId, `‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡ªÄ‡∫•‡∫Å ${text} ?`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ ‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô", callback_data: `confirm:${text}:${userId}:${username}:${name}` }],
          [{ text: "‚ùå ‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å", callback_data: "cancel" }]
        ]
      }
    });
  }

  if (text === "üìä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö" && isAdmin(userId)) {
    const replyMarkup = {
      reply_markup: {
        keyboard: [
          [{ text: "üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" }],
          [{ text: "üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" }],
          [{ text: "üßπ ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÇ‡∏û‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" }],
          [{ text: "‚ùå ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" }],
          [{ text: "‚Ü©Ô∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å" }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    };
    bot.sendMessage(chatId, "üìä ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö", replyMarkup);
    return;
  }

  if (text === "üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" && isAdmin(userId)) {
    const round = getRoundDate();
    const count = await Bet.countDocuments({ round });
    bot.sendMessage(chatId, `üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${count}`);
    return;
  }

  if (text === "üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" && isAdmin(userId)) {
    const count = await Bet.countDocuments();
    bot.sendMessage(chatId, `üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${count}`);
    return;
  }

  if (text === "üßπ ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÇ‡∏û‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" && isAdmin(userId)) {
    const round = getRoundDate();
    await Bet.deleteMany({ round });
    bot.sendMessage(chatId, "üßπ ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÇ‡∏û‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß");
    return;
  }

  if (text === "‚ùå ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" && isAdmin(userId)) {
    await Result.deleteMany({});
    bot.sendMessage(chatId, "‚ùå ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    return;
  }

  if (text === "‚Ü©Ô∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å" && isAdmin(userId)) {
    bot.emit("text", { chat: { id: chatId }, from: { id: userId } }, "/start");
  }
});

/* ===== Callback Query ===== */
bot.on("callback_query", async (cb) => {
  const data = cb.data;
  const chatId = cb.message.chat.id;

  if (data.startsWith("confirm:")) {
    const [, number, userId, username, name] = data.split(":");
    const round = getRoundDate();
    const already = await Bet.findOne({ userId, round });
    if (already) {
      bot.sendMessage(chatId, "‚ö†Ô∏è ‡∫ó‡ªà‡∫≤‡∫ô‡∫ó‡∫≤‡∫ç‡ªÅ‡∫•‡ªâ‡∫ß");
    } else {
      await Bet.create({ userId, username, name, number, round });
      bot.sendMessage(chatId, `‚úÖ ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡ªÄ‡∫•‡∫Å ${number} ‡∫Ç‡∫≠‡∫á‡∫ó‡ªà‡∫≤‡∫ô‡ªÅ‡∫•‡ªâ‡∫ß`);
    }
  } else if (data === "cancel") {
    bot.sendMessage(chatId, "‚ùå ‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å‡∫Å‡∫≤‡∫ô‡∫ó‡∫≤‡∫ç");
  }
  bot.answerCallbackQuery(cb.id);
});

/* ===== CRON Jobs ===== */
cron.schedule("30 20 * * 1,3,5", async () => {
  const admins = [SUPER_ADMIN_ID, ...EDITOR_IDS].filter(Boolean);
  for (const id of admins) {
    await bot.sendMessage(id, "‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Å‡πà‡∏≠‡∏ô 21:00 ‡∏ô. (‡∏Å‡∏î üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)");
  }
}, { timezone: "Asia/Bangkok" });

cron.schedule("0 21 * * 1,3,5", async () => {
  const round = getRoundDate();
  const result = await Result.findOne({ round }).sort({ createdAt: -1 });
  if (!result) {
    await bot.sendMessage(TARGET_GROUP_ID, "‚ö†Ô∏è ‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ú‡∫ª‡∫ô‡∫Æ‡∫≠‡∫ö‡∫ô‡∫µ‡ªâ");
    return;
  }
  const winners4 = await Bet.find({ number: result.top4, round });
  const winners3 = await Bet.find({ number: result.top3, round });
  const winners2 = await Bet.find({ number: result.top2, round });

  let msg = `üéâ ‡∫õ‡∫∞‡∫Å‡∫≤‡∫î‡∫ú‡∫ª‡∫ô‡∫´‡∫ß‡∫ç ${round}\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
  msg += `üëë 4 ‡∫ï‡∫ª‡∫ß: ${result.top4} ‚ûù 20,000 ‡ªÄ‡∫Ñ‡∫£‡∫î‡∫¥‡∫î\nüéØ ${prettyList(winners4)}\n\n`;
  msg += `ü•á 3 ‡∫ï‡∫ª‡∫ß: ${result.top3} ‚ûù 5,000 ‡ªÄ‡∫Ñ‡∫£‡∫î‡∫¥‡∫î\nüéØ ${prettyList(winners3)}\n\n`;
  msg += `‚¨ÜÔ∏è 2 ‡∫ï‡∫ª‡∫ß: ${result.top2} ‚ûù 500 ‡ªÄ‡∫Ñ‡∫£‡∫î‡∫¥‡∫î\nüéØ ${prettyList(winners2)}\n\n`;
  msg += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüèÜ ‡∫Ç‡ªç‡ªÉ‡∫´‡ªâ‡ªÇ‡∫ä‡∫Å‡∫î‡∫µ‡ªÉ‡∫ô‡∫Æ‡∫≠‡∫ö‡ªú‡ªâ‡∫≤!";

  await bot.sendMessage(TARGET_GROUP_ID, msg);
  await Bet.deleteMany({ round });
}, { timezone: "Asia/Bangkok" });

/* ===== Webhook ===== */
const WEBHOOK_URL = `${process.env.RENDER_EXTERNAL_URL}/bot${BOT_TOKEN}`;
bot.setWebHook(WEBHOOK_URL);
app.post(`/bot${BOT_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});
app.get("/", (_, res) => res.send("Lao Lotto Bot Webhook ‚úÖ"));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ Server on ${PORT}`));
